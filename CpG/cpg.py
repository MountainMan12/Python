from numpy import *


#Using FASTA file to read sequence


seq = raw_input('Enter the filename: ')
fh = open(seq, 'r')
line = fh.readline()
meta = ''
seq = ''
while line:
	line = line.rstrip('\n') #removing newline character
	if '>' in line:
		meta = line
	else:
		seq += line
	line = fh.readline()

length=len(seq)
print 'Length of the sequence is: %d'%length


def get_substrings(string):
    length = len(string)
    for i in xrange(length):
            yield(string[i:i+2]) 

sequence = list(get_substrings(seq))
no_tr = len(seq) - 1
print 'The total number of transitions are: %d'%no_tr
#TO GENERATE A TRANSITION PROBABILITY MATRIX USING A MARKOV MODEL OF ORDER 1.THE MARTIX INFORMATION IS GENERATED BY THE + and - MODELS.
# + MODEL IS THE CpG-RICH REGION

#COUNTING ALL THE POSSIBLE DINUCLEOTIDES

count_AA = round((float(sequence.count('AA')) / no_tr),3)
count_AT = round((float(sequence.count('AT')) / no_tr),3)
count_AG = round((float(sequence.count('AG')) / no_tr),3)
count_AC = round((float(sequence.count('AC')) / no_tr),3)
count_GA = round((float(sequence.count('GA')) / no_tr),3)
count_GT = round((float(sequence.count('GT')) / no_tr),3)
count_GG = round((float(sequence.count('GG')) / no_tr),3)
count_GC = round((float(sequence.count('GC')) / no_tr),3)
count_CA = round((float(sequence.count('CA')) / no_tr),3)
count_CT = round((float(sequence.count('CT')) / no_tr),3)
count_CG = round((float(sequence.count('CG')) / no_tr),3)
count_CC = round((float(sequence.count('CC')) / no_tr),3)
count_TA = round((float(sequence.count('TA')) / no_tr),3)
count_TT = round((float(sequence.count('TT')) / no_tr),3)
count_TG = round((float(sequence.count('TG')) / no_tr),3)
count_TC = round((float(sequence.count('TC')) / no_tr),3)

a = array([['+','  A  ','  T  ','  G  ','  C  '],['A:',count_AA,count_AT,count_AG,count_AC],['T:',count_TA,count_TT,count_TG,count_TC],
		   ['G:',count_GA,count_GT,count_GG,count_GC],['C:',count_CA,count_CT,count_CG,count_CC]])
    
m = reshape(a,(5,5))
print(m)
